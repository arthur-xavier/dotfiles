# vim:noexpandtab:fdm=marker:fdl=0:
priority 1

global !p
def expand(snip):
    if snip.tabstop != 1:
        return
    vim.eval('feedkeys("\<C-R>=UltiSnips#ExpandSnippet()\<CR>")')
endglobal

snippet "^module\s" "" rbA
module ${1:`!v substitute(substitute(expand('%:r'), '[/\\]','.','g'),'^\%(\l*\.\)\?','','')`} where

import ${2:Prelude}

${0}
endsnippet

# Define types {{{

snippet dfdt "Define a data type" b
data ${1:Type}
	= ${0}
endsnippet

snippet dfnt "Define a newtype" b
newtype ${1:Type} = ${0}
endsnippet

snippet dfta "Define a type synonym" b
type ${1:Type} = ${0}
endsnippet

# }}}

# Type classes {{{

snippet "^class\s" "Define a typeclass" rbA
class ${1:Class} ${2:args} where
	${0}
endsnippet

snippet dfins "Define a typeclass instance" b
instance `!p
snip.rv = t[1][:1].lower() + t[1][1:] + t[2].replace('(', '').replace(')', '').split(' ')[0]
` :: ${1:Class} ${2:Type} where
	${0}
endsnippet

# }}}

# Values {{{

snippet let "let ... in ..." b
let
	${1}
in
	${0}
endsnippet
post_jump "expand(snip)"
snippet "letin\s" "let ... in ..." rbA
let$1
endsnippet

snippet wh "where ..." b
where
	${0}
endsnippet
post_jump "expand(snip)"
snippet "where\s" "where ..." rbA
wh$1
endsnippet

snippet fa. "forall a." w
forall ${1:a}. ${0:x}
endsnippet

snippet lam "Lambda" w
\${1:_} -> ${0:?x}
endsnippet

snippet dt "value :: Type" w
${1:value} :: ${0:Type}
endsnippet

snippet drt "Define record type in multiple lines" w
{ ${1:field} :: ${0:Type}
}
endsnippet

# Equality {{{

snippet df "Define an equality" b
${1:name} = ${0:`!p snip.rv = '?' + t[1].split(' ')[0]`}
endsnippet

snippet dfd "Define an equality with a type signature" b
${1:name} :: ${2:Type}
$1 = ${0:`!p snip.rv = '?' + t[1].split(' ')[0]`}
endsnippet

# }}}

# Function {{{

snippet dfk "Define a function" b
${1:function} ${2:args} = ${0:`!p snip.rv = '?' + t[1].split(' ')[0]`}
endsnippet

snippet dfkd "Define a function with a type signature" b
${1:function} :: ${2:Args} -> ${3:Return}
$1 ${4:args} = ${0:`!p snip.rv = '?' + t[1].split(' ')[0]`}
endsnippet

# }}}

# }}}

# React Basic {{{

snippet "^comp\s" "react-basic component" rbA
${1:name}
	:: ${2}
	-> JSX
$1 =
	make (createComponent "`!p snip.rv = t[1][:1].upper() + t[1][1:]`")
		{ initialState
		, ${3:render}
		}
	where
		initialState =
			{ ${4}
			}

		render self@{ props, state, setState } =
			${0}
endsnippet

snippet "^scomp\s" "react-basic stateless component" rbA
${1:name}
	:: ${2}
	-> JSX
$1 = makeStateless (createComponent "`!p snip.rv = t[1][:1].upper() + t[1][1:]`") render
	where
		render props =
			${0}
endsnippet

# }}}

# Forms {{{

snippet dfo "Define a form"
${1:form}
	:: forall props
	 . FormBuilder
			{ readonly :: Boolean | props }
			${2:FormData}
			${3:Result}
$1 = ${0}
endsnippet

snippet dfof "Form field"
${1:field} <-
	F.indent "${2}" Neither
	$ F.focus Lenses._$1
	$ ${0}
endsnippet

snippet dfof* "Required form field"
${1:field} <-
	F.indent "${2}" Required
	$ F.focus Lenses._$1
	$ F.validated ${3:(F.nonEmpty "$2")}
	$ ${0}
endsnippet

# }}}
